# Commit Message Check Workflow
#
# This reusable workflow validates commit messages in pull requests to ensure
# they follow conventional commit format using Commitizen.
#
# Key Features:
# - Conventional commit validation
# - Multi-commit PR support
# - Commitizen integration
# - Detailed error reporting
# - Configurable validation rules
#
# Process Stages:
# 1. Environment Setup:
#    - Python installation
#    - Commitizen installation
#    - Repository checkout
#
# 2. Commit Analysis:
#    - PR commit extraction
#    - Individual commit validation
#    - Format compliance check
#
# 3. Validation Results:
#    - Error reporting
#    - Success confirmation
#    - Detailed feedback
#
# Required Inputs:
# - python-version: Python version for validation (default: "3.10")
# - base-ref: Base branch for comparison (default: github.base_ref)
#
# Example Usage:
# 1. Basic Validation:
#    jobs:
#      commit-check:
#        uses: ./.github/workflows/_reusable-commit-message-check.yaml
#
# 2. Custom Configuration:
#    jobs:
#      commit-check:
#        uses: ./.github/workflows/_reusable-commit-message-check.yaml
#        with:
#          python-version: "3.11"
#          base-ref: "develop"
#
# Note: Requires Commitizen configuration in pyproject.toml

name: Reusable Commit Message Check

on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version for validation"
        type: string
        default: "3.10"
      base-ref:
        description: "Base branch for comparison"
        type: string
        default: ""

permissions:
  contents: read

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install commitizen

      - name: Validate commit messages
        env:
          BASE_REF: ${{ inputs.base-ref || github.base_ref }}
        run: |
          echo "Validating commits against base branch: $BASE_REF"

          # Get all non-merge commits in the PR
          COMMITS=$(git log --no-merges --pretty=format:"%H" origin/$BASE_REF..HEAD)

          if [ -z "$COMMITS" ]; then
            echo "No commits found to validate (excluding merges)."
            exit 0
          fi

          echo "Found commits to validate:"
          git log --oneline --no-merges origin/$BASE_REF..HEAD
          echo ""

          # Create a temporary file to store the commit message for checking
          TEMP_COMMIT_MSG_FILE=$(mktemp)
          # Ensure the temp file is cleaned up on exit
          trap 'rm -f "$TEMP_COMMIT_MSG_FILE"' EXIT

          # Check each commit message
          FAILED_COMMITS=()
          for commit in $COMMITS; do
            COMMIT_MSG=$(git log -1 --pretty=format:"%B" $commit)
            COMMIT_SHORT=$(git log -1 --pretty=format:"%h %s" $commit)

            echo "Checking: $COMMIT_SHORT"

            # Write the commit message to the temporary file
            echo "$COMMIT_MSG" > "$TEMP_COMMIT_MSG_FILE"

            # Check the commit message from the file
            if ! cz check --commit-msg-file "$TEMP_COMMIT_MSG_FILE"; then
              echo "::error::Commit $commit does not follow conventional commit format"
              echo "::error::Message: $COMMIT_MSG"
              FAILED_COMMITS+=($commit)
            else
              echo "✓ Valid conventional commit"
            fi
            echo ""
          done

          if [ ${#FAILED_COMMITS[@]} -gt 0 ]; then
            echo "::error::${#FAILED_COMMITS[@]} commit(s) failed validation"
            echo "::error::Please ensure all commits follow the conventional commit format"
            echo "::error::Use 'cz commit' to create properly formatted commits"
            exit 1
          fi

          echo "✅ All commits follow conventional commit format"
