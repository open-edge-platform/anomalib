# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
import asyncio
import base64
import time
from abc import ABCMeta, abstractmethod
from datetime import datetime
from typing import Any

import cv2
import numpy as np
from anomalib.data import NumpyImageBatch as PredictionResult

from pydantic_models import OutputFormat, Sink


def numpy_to_base64(image: np.ndarray, fmt: str = ".jpg") -> str:
    """Convert a numpy array image to a base64 string."""
    success, img_buf = cv2.imencode(fmt, image)
    if success:
        return base64.b64encode(img_buf).decode("utf-8")
    raise ValueError(f"Failed to encode image in format {fmt}")


class DispatchError(Exception):
    """Exception raised when there is an error in dispatching."""

    def __init__(self):
        super().__init__("Failed to dispatch the output")


class BaseDispatcher(metaclass=ABCMeta):
    """
    Base class for dispatchers.
    This class should be inherited by all dispatcher classes.
    """

    def __init__(self, output_config: Sink) -> None:
        """
        Initialize the dispatcher.
        Args:
            output_config: Configuration for the output destination
        """
        self.output_formats = output_config.output_formats
        self.rate_limit = output_config.rate_limit
        self.min_interval = 1.0 / self.rate_limit if self.rate_limit is not None else 0.0
        self.last_dispatch_time = 0.0

    @abstractmethod
    def _dispatch(
        self,
        original_image: np.ndarray,
        image_with_visualization: np.ndarray,
        predictions: PredictionResult,
    ) -> None:
        """
        Internal method to dispatch an image with predictions.

        This method should be overridden by subclasses to implement specific dispatch logic.
        Args:
            original_image (np.ndarray): The original image
            image_with_visualization (np.ndarray): The image with overlaid predictions
            predictions (PredictionResult): Predictions generated by the model
        """

    def _create_payload(
        self, original_image: np.ndarray, image_with_visualization: np.ndarray, predictions: PredictionResult
    ) -> dict[str, Any]:
        """Create a JSON payload with the requested output formats."""
        PredictionResult: dict[str, Any] = {}
        payload = {"timestamp": datetime.now().isoformat(), "PredictionResult": PredictionResult}

        if OutputFormat.IMAGE_ORIGINAL in self.output_formats:
            PredictionResult[OutputFormat.IMAGE_ORIGINAL] = {
                "data": numpy_to_base64(original_image),
                "format": "jpeg",
            }

        if OutputFormat.IMAGE_WITH_PREDICTIONS in self.output_formats:
            PredictionResult[OutputFormat.IMAGE_WITH_PREDICTIONS] = {
                "data": numpy_to_base64(image_with_visualization),
                "format": "jpeg",
            }

        if OutputFormat.PREDICTIONS in self.output_formats:
            PredictionResult[OutputFormat.PREDICTIONS] = str(predictions)

        return payload

    async def dispatch(
        self,
        original_image: np.ndarray,
        image_with_visualization: np.ndarray,
        predictions: PredictionResult,
    ) -> None:
        """
        Dispatch an image with predictions.
        Args:
            original_image (np.ndarray): The original image
            image_with_visualization (np.ndarray): The image with overlaid predictions
            predictions (PredictionResult): Predictions generated by the model

        Raises:
            DispatchError: If there is an error in dispatching the output
        """
        # Apply rate limiting
        if self.rate_limit is not None:
            current_time = time.time()
            time_since_last = current_time - self.last_dispatch_time
            if time_since_last < self.min_interval:
                return
            self.last_dispatch_time = time.time()

        try:
            await asyncio.to_thread(self._dispatch, original_image, image_with_visualization, predictions)
        except Exception as e:
            raise DispatchError from e
