import argparse
import random
import warnings

import datasets.mvtec as mvtec
import torch
import torch.optim as optim
from cnn.efficientnet import EfficientNet as effnet
from cnn.resnet import resnet18, wide_resnet50_2
from cnn.vgg import vgg19_bn
from datasets.mvtec import MVTecDataset
from torch.utils.data import DataLoader
from utils.cfa import *
from utils.metric import *
from utils.visualizer import *

from anomalib.models.cfa.torch_model import CfaModel

warnings.filterwarnings("ignore", category=UserWarning)
use_cuda = torch.cuda.is_available()
device = torch.device("cuda" if use_cuda else "cpu")


def parse_args():
    parser = argparse.ArgumentParser("CFA configuration")
    parser.add_argument("--data_path", type=str, default="./datasets/MVTec/")
    parser.add_argument("--save_path", type=str, default="./mvtec_result")
    parser.add_argument("--Rd", type=bool, default=False)
    parser.add_argument(
        "--cnn",
        type=str,
        choices=["resnet18", "wide_resnet50_2", "efficientnet_b5", "vgg19_bn"],
        default="wide_resnet50_2",
    )
    parser.add_argument("--resize", type=int, choices=[224, 256], default=224)
    parser.add_argument("--size", type=int, choices=[224, 256], default=224)
    parser.add_argument("--gamma_c", type=int, default=1)
    parser.add_argument("--gamma_d", type=int, default=1)

    parser.add_argument("--class_name", type=str, default="zipper")

    return parser.parse_args()


def run():
    seed = 1024
    random.seed(seed)
    torch.manual_seed(seed)
    if use_cuda:
        torch.cuda.manual_seed_all(seed)

    args = parse_args()
    class_names = mvtec.CLASS_NAMES if args.class_name == "all" else [args.class_name]

    total_roc_auc = []
    total_pixel_roc_auc = []
    total_pixel_pro_auc = []

    fig, ax = plt.subplots(1, 2, figsize=(20, 10))
    fig_img_rocauc = ax[0]
    fig_pixel_rocauc = ax[1]

    for class_name in class_names:
        best_img_roc = -1
        best_pxl_roc = -1
        best_pxl_pro = -1
        print(" ")
        print("%s | newly initialized..." % class_name)

        train_dataset = MVTecDataset(
            dataset_path=args.data_path,
            class_name=class_name,
            resize=args.resize,
            cropsize=args.size,
            is_train=True,
            wild_ver=args.Rd,
        )

        test_dataset = MVTecDataset(
            dataset_path=args.data_path,
            class_name=class_name,
            resize=args.resize,
            cropsize=args.size,
            is_train=False,
            wild_ver=args.Rd,
        )

        train_loader = DataLoader(
            dataset=train_dataset,
            batch_size=4,
            pin_memory=True,
            shuffle=True,
            drop_last=True,
        )

        test_loader = DataLoader(
            dataset=test_dataset,
            batch_size=4,
            pin_memory=True,
        )

        if args.cnn == "wide_resnet50_2":
            model = wide_resnet50_2(pretrained=True, progress=True)
        elif args.cnn == "resnet18":
            model = resnet18(pretrained=True, progress=True)
        elif args.cnn == "efficientnet_b5":
            model = effnet.from_pretrained("efficientnet-b5")
        elif args.cnn == "vgg19_bn":
            model = vgg19_bn(pretrained=True, progress=True)

        model = model.to(device)
        model.eval()

        cfa1 = DSVDD(model, train_loader, args.cnn, args.gamma_c, args.gamma_d, device)
        cfa1 = cfa1.to(device)

        cfa2 = CfaModel(
            data_loader=train_loader, backbone=args.cnn, gamma_c=args.gamma_c, gamma_d=args.gamma_d, device=device
        )
        cfa2 = cfa2.to(device)

        epochs = 30
        params1 = [{"params": cfa1.parameters()}]
        params2 = [{"params": cfa2.parameters()}]
        optimizer1 = optim.AdamW(params=params1, lr=1e-3, weight_decay=5e-4, amsgrad=True)
        optimizer2 = optim.AdamW(params=params2, lr=1e-3, weight_decay=5e-4, amsgrad=True)

        for epoch in tqdm(range(epochs), "%s -->" % (class_name)):
            r"TEST PHASE"

            test_imgs = list()
            gt_mask_list = list()
            gt_list = list()
            heatmaps1 = None
            heatmaps2 = None

            cfa1.train()
            cfa2.train()
            for (x, _, _) in train_loader:
                optimizer1.zero_grad()
                p = model(x.to(device))

                loss1, _ = cfa1(p)
                loss2 = cfa2(x.to(device))
                loss1.backward(retain_graph=True)
                loss2.backward(retain_graph=True)
                optimizer1.step()
                optimizer2.step()
                print("loss1: ", loss1.item(), "loss2: ", loss2.item())

            cfa1.eval()
            cfa2.eval()
            for x, y, mask in test_loader:
                test_imgs.extend(x.cpu().detach().numpy())
                gt_list.extend(y.cpu().detach().numpy())
                gt_mask_list.extend(mask.cpu().detach().numpy())


                heatmap2 = cfa2(x.to(device))
                p = model(x.to(device))
                _, score = cfa1(p)
                heatmap1 = score.cpu().detach()
                heatmap1 = torch.mean(heatmap1, dim=1)
                heatmaps1 = torch.cat((heatmaps1, heatmap1), dim=0) if heatmaps1 != None else heatmap1
                heatmaps2 = torch.cat((heatmaps2, heatmap2), dim=0) if heatmaps2 != None else heatmap2

            heatmaps1 = upsample(heatmaps1, size=x.size(2), mode="bilinear")
            heatmaps1 = gaussian_smooth(heatmaps1, sigma=4)

            print(f"heatmaps1: {heatmaps1.shape} {heatmap1.min()} {heatmap1.max()} {heatmap1.mean()}")
            print(f"heatmaps2: {heatmaps2.shape} {heatmap2.min()} {heatmap2.max()} {heatmap2.mean()}")

            gt_mask = np.asarray(gt_mask_list)
            scores = rescale(heatmaps1)

            scores = scores
            threshold = get_threshold(gt_mask, scores)

            r"Image-level AUROC"
            fpr, tpr, img_roc_auc = cal_img_roc(scores, gt_list)
            best_img_roc = img_roc_auc if img_roc_auc > best_img_roc else best_img_roc

            fig_img_rocauc.plot(fpr, tpr, label="%s img_ROCAUC: %.3f" % (class_name, img_roc_auc))

            r"Pixel-level AUROC"
            fpr, tpr, per_pixel_rocauc = cal_pxl_roc(gt_mask, scores)
            best_pxl_roc = per_pixel_rocauc if per_pixel_rocauc > best_pxl_roc else best_pxl_roc

            r"Pixel-level AUPRO"
            per_pixel_proauc = cal_pxl_pro(gt_mask, scores)
            best_pxl_pro = per_pixel_proauc if per_pixel_proauc > best_pxl_pro else best_pxl_pro

            print("[%d / %d]image ROCAUC: %.3f | best: %.3f" % (epoch, epochs, img_roc_auc, best_img_roc))
            print("[%d / %d]pixel ROCAUC: %.3f | best: %.3f" % (epoch, epochs, per_pixel_rocauc, best_pxl_roc))
            print("[%d / %d]pixel PROAUC: %.3f | best: %.3f" % (epoch, epochs, per_pixel_proauc, best_pxl_pro))

        print("image ROCAUC: %.3f" % (best_img_roc))
        print("pixel ROCAUC: %.3f" % (best_pxl_roc))
        print("pixel ROCAUC: %.3f" % (best_pxl_pro))

        total_roc_auc.append(best_img_roc)
        total_pixel_roc_auc.append(best_pxl_roc)
        total_pixel_pro_auc.append(best_pxl_pro)

        fig_pixel_rocauc.plot(fpr, tpr, label="%s ROCAUC: %.3f" % (class_name, per_pixel_rocauc))
        save_dir = args.save_path + "/" + f"pictures_{args.cnn}"
        os.makedirs(save_dir, exist_ok=True)
        plot_fig(test_imgs, scores, gt_mask_list, threshold, save_dir, class_name)

    print("Average ROCAUC: %.3f" % np.mean(total_roc_auc))
    fig_img_rocauc.title.set_text("Average image ROCAUC: %.3f" % np.mean(total_roc_auc))
    fig_img_rocauc.legend(loc="lower right")

    print("Average pixel ROCUAC: %.3f" % np.mean(total_pixel_roc_auc))
    fig_pixel_rocauc.title.set_text("Average pixel ROCAUC: %.3f" % np.mean(total_pixel_roc_auc))
    fig_pixel_rocauc.legend(loc="lower right")

    print("Average pixel PROUAC: %.3f" % np.mean(total_pixel_pro_auc))

    fig.tight_layout()
    fig.savefig(os.path.join(args.save_path, "roc_curve.png"), dpi=100)


if __name__ == "__main__":
    run()
